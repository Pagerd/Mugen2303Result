+ source /root/mugen/libs/locallibs/common_lib.sh
++ python3 --version
++ '[' 0 -eq 0 ']'
++ source /root/mugen/libs/locallibs/common_lib_python.sh
+ main
++ type -t post_test
+ '[' -n function ']'
+ trap post_test EXIT INT HUP TERM
+ rpm -qa
+ grep expect
++ type -t config_params
+ '[' -n '' ']'
++ type -t pre_test
+ '[' -n function ']'
+ pre_test
+ LOG_INFO 'Start to prepare the test environment.'
+ message='Start to prepare the test environment.'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level info --message 'Start to prepare the test environment.'
Fri Jun 23 11:39:50 2023 - INFO  - Start to prepare the test environment.
+ DNF_INSTALL ocaml
+ pkgs=ocaml
+ node=1
+ '[' -z '' ']'
+ tmpfile=
++ python3 /root/mugen/libs/locallibs/rpm_manage.py install --pkgs ocaml --node 1 --tempfile ''
+ tmpfile2=/tmp/tmp184uxvp9
+ '[' -z '' ']'
+ tmpfile=/tmp/tmp184uxvp9
+ cp -rf ../example.ml ../hello_stubs.c ../hello.ml ./
+ LOG_INFO 'End to prepare the test environment.'
+ message='End to prepare the test environment.'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level info --message 'End to prepare the test environment.'
Fri Jun 23 11:45:21 2023 - INFO  - End to prepare the test environment.
++ type -t run_test
+ '[' -n function ']'
+ run_test
+ LOG_INFO 'Start to run test.'
+ message='Start to run test.'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level info --message 'Start to run test.'
Fri Jun 23 11:45:23 2023 - INFO  - Start to run test.
+ ocamlmktop -unsafe-string example.ml
/usr/bin/ocamlc: OCaml has been configured with -force-safe-string: -unsafe-string is not available.
Usage: ocamlc <options> <files>
Try 'ocamlc --help' for more information.
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 31'
+ message='oe_test_ocaml_davail.sh line 31'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 31'
Fri Jun 23 11:45:25 2023 - ERROR - oe_test_ocaml_davail.sh line 31
+ '[' 0 -eq 1 ']'
+ return 0
+ grep -ai unsafe a.out
grep: a.out: No such file or directory
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 33'
+ message='oe_test_ocaml_davail.sh line 33'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 33'
Fri Jun 23 11:45:27 2023 - ERROR - oe_test_ocaml_davail.sh line 33
+ '[' 0 -eq 1 ']'
+ return 0
+ ocamlmktop.opt -unsafe-string example.ml
/usr/bin/ocamlc: OCaml has been configured with -force-safe-string: -unsafe-string is not available.
Usage: ocamlc <options> <files>
Try 'ocamlc --help' for more information.
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 35'
+ message='oe_test_ocaml_davail.sh line 35'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 35'
Fri Jun 23 11:45:30 2023 - ERROR - oe_test_ocaml_davail.sh line 35
+ '[' 0 -eq 1 ']'
+ return 0
+ grep -ai unsafe a.out
grep: a.out: No such file or directory
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 37'
+ message='oe_test_ocaml_davail.sh line 37'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 37'
Fri Jun 23 11:45:32 2023 - ERROR - oe_test_ocaml_davail.sh line 37
+ '[' 0 -eq 1 ']'
+ return 0
+ ocamlmktop.byte -unsafe-string example.ml
/usr/bin/ocamlc: OCaml has been configured with -force-safe-string: -unsafe-string is not available.
Usage: ocamlc <options> <files>
Try 'ocamlc --help' for more information.
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 39'
+ message='oe_test_ocaml_davail.sh line 39'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 39'
Fri Jun 23 11:45:34 2023 - ERROR - oe_test_ocaml_davail.sh line 39
+ '[' 0 -eq 1 ']'
+ return 0
+ grep -ai unsafe a.out
grep: a.out: No such file or directory
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 41'
+ message='oe_test_ocaml_davail.sh line 41'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 41'
Fri Jun 23 11:45:36 2023 - ERROR - oe_test_ocaml_davail.sh line 41
+ '[' 0 -eq 1 ']'
+ return 0
+ ocamlopt.byte -davail example.ml
/usr/bin/ocamlopt.byte: unknown option '-davail'.
Usage: ocamlopt <options> <files>
Try 'ocamlopt --help' for more information.
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 43'
+ message='oe_test_ocaml_davail.sh line 43'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 43'
Fri Jun 23 11:45:37 2023 - ERROR - oe_test_ocaml_davail.sh line 43
+ '[' 0 -eq 1 ']'
+ return 0
+ grep -az vail a.out
grep: a.out: No such file or directory
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 45'
+ message='oe_test_ocaml_davail.sh line 45'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 45'
Fri Jun 23 11:45:39 2023 - ERROR - oe_test_ocaml_davail.sh line 45
+ '[' 0 -eq 1 ']'
+ return 0
+ ocamlopt.opt -davail example.ml
ocamlopt.opt: unknown option '-davail'.
Usage: ocamlopt <options> <files>
Try 'ocamlopt --help' for more information.
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 47'
+ message='oe_test_ocaml_davail.sh line 47'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 47'
Fri Jun 23 11:45:42 2023 - ERROR - oe_test_ocaml_davail.sh line 47
+ '[' 0 -eq 1 ']'
+ return 0
+ grep -az vail a.out
grep: a.out: No such file or directory
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 49'
+ message='oe_test_ocaml_davail.sh line 49'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 49'
Fri Jun 23 11:45:44 2023 - ERROR - oe_test_ocaml_davail.sh line 49
+ '[' 0 -eq 1 ']'
+ return 0
+ ocamloptp.byte -davail example.ml
/usr/bin/ocamloptp.byte: unknown option '-davail'.
Usage: ocamloptp <options> <files>
options are:
  -P [afilmt]  Profile constructs specified by argument (default fm):
      a  Everything
      f  Function calls and method calls
      i  if ... then ... else
      l  while and for loops
      m  match ... with
      t  try ... with
  -a  Build a library
  -alert <list>  Enable or disable alerts according to <list>:
        +<alertname>  enable alert <alertname>
        -<alertname>  disable alert <alertname>
        ++<alertname> treat <alertname> as fatal error
        --<alertname> treat <alertname> as non-fatal
        @<alertname>  enable <alertname> and treat it as fatal error
    <alertname> can be 'all' to refer to all alert names
  -absname  Show absolute filenames in error messages
  -afl-instrument Enable instrumentation for afl-fuzz
  -afl-inst-ratio Configure percentage of branches instrumented
     (advanced, see afl-fuzz docs for AFL_INST_RATIO)
  -annot  (deprecated) Save information in <filename>.annot
  -bin-annot  Save typedtree in <filename>.cmt
  -inline-branch-factor <n>|<round>=<n>[,...]  Estimate the probability of a branch being cold as 1/(1+n) (used for inlining) (default 0.10)
  -c  Compile only (do not link)
  -cc <command>  Use <command> as the C compiler and linker
  -cclib <opt>  Pass option <opt> to the C linker
  -ccopt <opt>  Pass option <opt> to the C compiler and linker
  -clambda-checks  Instrument clambda code with closure and field access checks (for debugging the compiler)
  -Oclassic  Make inlining decisions at function definition time rather than at the call site (replicates previous behaviour of the compiler)
  -color {auto|always|never}  Enable or disable colors in compiler messages
    The following settings are supported:
      auto    use heuristics to enable colors only if supported
      always  enable colors
      never   disable colors
    The default setting is 'auto', and the current heuristic
    checks that the TERM environment variable exists and is
    not empty or "dumb", and that isatty(stderr) holds.
  If the option is not specified, these setting can alternatively
  be set through the OCAML_COLOR environment variable.
  -error-style {contextual|short}  Control the way error messages and warnings are printed
    The following settings are supported:
      short       only print the error and its location
      contextual  like "short", but also display the source code
                  snippet corresponding to the location of the error
    The default setting is 'contextual'.
  If the option is not specified, these setting can alternatively
  be set through the OCAML_ERROR_STYLE environment variable.
  -compact  Optimize code size rather than speed
  -config  Print configuration values and exit
  -config-var  Print the value of a configuration variable, without a newline, and exit
    (print nothing and exit with error value if the variable does not exist)
  -dtypes  (deprecated) same as -annot
  -for-pack <ident>  Generate code that can later be `packed' with
     ocamlopt -pack -o <ident>.cmx
  -g  Record debugging information for exception backtrace
  -function-sections  (option not available)
  -stop-after {parsing|typing|scheduling|emit} Stop after the given compilation pass.
  -save-ir-after {scheduling} Save intermediate representation after the given compilation pass(may be specified more than once).
  -i  Print inferred interface
  -I <dir>  Add <dir> to the list of include directories
  -impl <file>  Compile <file> as a .ml file
  -inline <n>|<round>=<n>[,...]  Aggressiveness of inlining (default 1.25, higher numbers mean more aggressive)
  -inline-toplevel <n>|<round>=<n>[,...]  Aggressiveness of inlining at toplevel (higher numbers mean more aggressive)
  -inline-alloc-cost <n>|<round>=<n>[,...]  The cost of not removing an allocation during inlining (default 7, higher numbers more costly)
  -inline-branch-cost <n>|<round>=<n>[,...]  The cost of not removing a conditional during inlining (default 5, higher numbers more costly)
  -inline-call-cost <n>|<round>=<n>[,...]  The cost of not removing a call during inlining (default 5, higher numbers more costly)
  -inline-prim-cost <n>|<round>=<n>[,...]  The cost of not removing a primitive during inlining (default 3, higher numbers more costly)
  -inline-indirect-cost <n>|<round>=<n>[,...]  The cost of not removing an indirect call during inlining (default 4, higher numbers more costly)
  -inline-lifting-benefit <n>|<round>=<n>[,...]  The benefit of lifting definitions to toplevel during inlining (default 1300, higher numbers more beneficial)
  -inlining-report  Emit `.<round>.inlining' file(s) (one per round) showing the inliner's decisions
  -insn-sched  Run the instruction scheduling pass (default)
  -intf <file>  Compile <file> as a .mli file
  -intf-suffix <string>  Suffix for interface files (default: .mli)
  -keep-docs  Keep documentation strings in .cmi files
  -no-keep-docs  Do not keep documentation strings in .cmi files (default)
  -keep-locs  Keep locations in .cmi files (default)
  -no-keep-locs  Do not keep locations in .cmi files
  -labels  Use commuting label mode
  -linkall  Link all modules, even unused ones
  -inline-max-depth <n>|<round>=<n>[,...]  Maximum depth of search for inlining opportunities inside inlined functions (default 1)
  -alias-deps  Do record dependencies for module aliases
  -no-alias-deps  Do not record dependencies for module aliases
  -linscan  Use the linear scan register allocator
  -app-funct  Activate applicative functors
  -no-app-funct  Deactivate applicative functors
  -no-float-const-prop  Deactivate constant propagation for floating-point operations
  -noassert  Do not compile assertion checks
  -noautolink  Do not automatically link C libraries specified in .cmxa files
  -nodynlink  Enable optimizations for code that will not be dynlinked
  -no-insn-sched  Do not run the instruction scheduling pass
  -nolabels  Ignore non-optional labels in types
  -nostdlib  Do not add default directory to the list of include directories
  -nopervasives  (undocumented)
  -no-unbox-free-vars-of-closures  Do not unbox variables that will appear inside function closures
  -no-unbox-specialised-args  Do not unbox arguments to which functions have been specialised
  -o <file>  Set output file name to <file>
  -O2  Apply increased optimization for speed
  -O3  Apply aggressive optimization for speed (may significantly increase code size and compilation time)
  -opaque  Does not generate cross-module optimization information
     (reduces necessary recompilation on module change)
  -open <module>  Opens the module <module> before typing
  -output-obj  Output an object file instead of an executable
  -output-complete-obj  Output an object file, including runtime, instead of an executable
  -p  (no longer supported)
  -pack  Package the given .cmx files into one .cmx
  -plugin <plugin>  (no longer supported)
  -pp <command>  Pipe sources through preprocessor <command>
  -ppx <command>  Pipe abstract syntax trees through preprocessor <command>
  -principal  Check principality of type inference
  -no-principal  Do not check principality of type inference (default)
  -rectypes  Allow arbitrary recursive types
  -no-rectypes  Do not allow arbitrary recursive types (default)
  -remove-unused-arguments  Remove unused function arguments
  -rounds <n>  Repeat tree optimization and inlining phases this many times (default 1).  Rounds are numbered starting from zero.
  -runtime-variant <str>  Use the <str> variant of the run-time system
  -with-runtime Include the runtime system in the generated program (default)
  -without-runtime Do not include the runtime system in the generated program.
  -S  Keep intermediate assembly file
  -safe-string  (was set when configuring the compiler)
  -shared  Produce a dynlinkable plugin
  -short-paths  Shorten paths in types
  -strict-sequence  Left-hand part of a sequence must have type unit
  -no-strict-sequence  Left-hand part of a sequence need not have type unit (default)
  -strict-formats  Reject invalid formats accepted by legacy implementations
     (Warning: Invalid formats may behave differently from
      previous OCaml versions, and will become always-rejected
      in future OCaml versions. You should always use this flag
      to detect invalid formats so you can fix them.)
  -no-strict-formats  Accept invalid formats accepted by legacy implementations (default)
     (Warning: Invalid formats may behave differently from
      previous OCaml versions, and will become always-rejected
      in future OCaml versions. You should never use this flag
      and instead fix invalid formats.)
  -thread  (deprecated) same as -I +threads
  -unbox-closures  Pass free variables via specialised arguments rather than closures
  -unbox-closures-factor <n > 0>  Scale the size threshold above which unbox-closures will slow down indirect calls rather than duplicating a function (default 10)
  -inline-max-unroll <n>|<round>=<n>[,...]  Unroll recursive functions at most this many times (default 0)
  -unboxed-types  unannotated unboxable types will be unboxed
  -no-unboxed-types  unannotated unboxable types will not be unboxed (default)
  -unsafe  Do not compile bounds checking on array and string access
  -unsafe-string  (option not available)
  -v  Print compiler version and location of standard library and exit
  -verbose  Print calls to external commands
  -version  Print version and exit
  --version  Print version and exit
  -vnum  Print version number and exit
  -w <list>  Enable or disable warnings according to <list>:
        +<spec>   enable warnings in <spec>
        -<spec>   disable warnings in <spec>
        @<spec>   enable warnings in <spec> and treat them as errors
     <spec> can be:
        <num>             a single warning number
        <num1>..<num2>    a range of consecutive warning numbers
        <letter>          a predefined set
     default setting is "+a-4-7-9-27-29-30-32..42-44-45-48-50-60-66..70"
  -warn-error <list>  Enable or disable error status for warnings according
     to <list>.  See option -w for the syntax of <list>.
     Default setting is "-a+31"
  -warn-help  Show description of warning numbers
  -where  Print location of standard library and exit
  - <file>  Treat <file> as a file name (even if it starts with `-')
  -match-context-rows <n>  (advanced, see manual section 11.2.)
  -dno-unique-ids  (undocumented)
  -dunique-ids  (undocumented)
  -dno-locations  (undocumented)
  -dlocations  (undocumented)
  -dsource  (undocumented)
  -dparsetree  (undocumented)
  -dtypedtree  (undocumented)
  -drawlambda  (undocumented)
  -dlambda  (undocumented)
  -drawclambda  (undocumented)
  -dclambda  (undocumented)
  -dcmm-invariants  Extra sanity checks on Cmm
  -dflambda  Print Flambda terms
  -drawflambda  Print Flambda terms after closure conversion
  -dflambda-invariants  Check Flambda invariants around each pass
  -dflambda-no-invariants  Do not Check Flambda invariants around each pass
  -dflambda-let <stamp>  Print when the given Flambda [Let] is created
  -dflambda-verbose  Print Flambda terms including around each pass
  -dcmm  (undocumented)
  -dsel  (undocumented)
  -dcombine  (undocumented)
  -dcse  (undocumented)
  -dlive  (undocumented)
  -dspill  (undocumented)
  -dsplit  (undocumented)
  -dinterf  (undocumented)
  -dprefer  (undocumented)
  -dalloc  (undocumented)
  -dreload  (undocumented)
  -dscheduling  (undocumented)
  -dlinear  (undocumented)
  -dinterval  (undocumented)
  -dstartup  (undocumented)
  -dtimings  Print timings information for each pass
  -dprofile  Print performance information for each pass
    The columns are: time alloc top-heap absolute-top-heap.
  -dump-into-file  dump output like -dlambda into <target>.dump
  -dump-pass  Record transformations performed by these passes: 
  -args <file> Read additional newline-terminated command line arguments
      from <file>
  -args0 <file> Read additional null character terminated command line arguments
from <file>
  -help  Display this list of options
  --help  Display this list of options
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 51'
+ message='oe_test_ocaml_davail.sh line 51'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 51'
Fri Jun 23 11:45:45 2023 - ERROR - oe_test_ocaml_davail.sh line 51
+ '[' 0 -eq 1 ']'
+ return 0
+ grep -az vail a.out
grep: a.out: No such file or directory
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 53'
+ message='oe_test_ocaml_davail.sh line 53'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 53'
Fri Jun 23 11:45:47 2023 - ERROR - oe_test_ocaml_davail.sh line 53
+ '[' 0 -eq 1 ']'
+ return 0
+ ocamloptp -davail example.ml
ocamloptp: unknown option '-davail'.
Usage: ocamloptp <options> <files>
options are:
  -P [afilmt]  Profile constructs specified by argument (default fm):
      a  Everything
      f  Function calls and method calls
      i  if ... then ... else
      l  while and for loops
      m  match ... with
      t  try ... with
  -a  Build a library
  -alert <list>  Enable or disable alerts according to <list>:
        +<alertname>  enable alert <alertname>
        -<alertname>  disable alert <alertname>
        ++<alertname> treat <alertname> as fatal error
        --<alertname> treat <alertname> as non-fatal
        @<alertname>  enable <alertname> and treat it as fatal error
    <alertname> can be 'all' to refer to all alert names
  -absname  Show absolute filenames in error messages
  -afl-instrument Enable instrumentation for afl-fuzz
  -afl-inst-ratio Configure percentage of branches instrumented
     (advanced, see afl-fuzz docs for AFL_INST_RATIO)
  -annot  (deprecated) Save information in <filename>.annot
  -bin-annot  Save typedtree in <filename>.cmt
  -inline-branch-factor <n>|<round>=<n>[,...]  Estimate the probability of a branch being cold as 1/(1+n) (used for inlining) (default 0.10)
  -c  Compile only (do not link)
  -cc <command>  Use <command> as the C compiler and linker
  -cclib <opt>  Pass option <opt> to the C linker
  -ccopt <opt>  Pass option <opt> to the C compiler and linker
  -clambda-checks  Instrument clambda code with closure and field access checks (for debugging the compiler)
  -Oclassic  Make inlining decisions at function definition time rather than at the call site (replicates previous behaviour of the compiler)
  -color {auto|always|never}  Enable or disable colors in compiler messages
    The following settings are supported:
      auto    use heuristics to enable colors only if supported
      always  enable colors
      never   disable colors
    The default setting is 'auto', and the current heuristic
    checks that the TERM environment variable exists and is
    not empty or "dumb", and that isatty(stderr) holds.
  If the option is not specified, these setting can alternatively
  be set through the OCAML_COLOR environment variable.
  -error-style {contextual|short}  Control the way error messages and warnings are printed
    The following settings are supported:
      short       only print the error and its location
      contextual  like "short", but also display the source code
                  snippet corresponding to the location of the error
    The default setting is 'contextual'.
  If the option is not specified, these setting can alternatively
  be set through the OCAML_ERROR_STYLE environment variable.
  -compact  Optimize code size rather than speed
  -config  Print configuration values and exit
  -config-var  Print the value of a configuration variable, without a newline, and exit
    (print nothing and exit with error value if the variable does not exist)
  -dtypes  (deprecated) same as -annot
  -for-pack <ident>  Generate code that can later be `packed' with
     ocamlopt -pack -o <ident>.cmx
  -g  Record debugging information for exception backtrace
  -function-sections  (option not available)
  -stop-after {parsing|typing|scheduling|emit} Stop after the given compilation pass.
  -save-ir-after {scheduling} Save intermediate representation after the given compilation pass(may be specified more than once).
  -i  Print inferred interface
  -I <dir>  Add <dir> to the list of include directories
  -impl <file>  Compile <file> as a .ml file
  -inline <n>|<round>=<n>[,...]  Aggressiveness of inlining (default 1.25, higher numbers mean more aggressive)
  -inline-toplevel <n>|<round>=<n>[,...]  Aggressiveness of inlining at toplevel (higher numbers mean more aggressive)
  -inline-alloc-cost <n>|<round>=<n>[,...]  The cost of not removing an allocation during inlining (default 7, higher numbers more costly)
  -inline-branch-cost <n>|<round>=<n>[,...]  The cost of not removing a conditional during inlining (default 5, higher numbers more costly)
  -inline-call-cost <n>|<round>=<n>[,...]  The cost of not removing a call during inlining (default 5, higher numbers more costly)
  -inline-prim-cost <n>|<round>=<n>[,...]  The cost of not removing a primitive during inlining (default 3, higher numbers more costly)
  -inline-indirect-cost <n>|<round>=<n>[,...]  The cost of not removing an indirect call during inlining (default 4, higher numbers more costly)
  -inline-lifting-benefit <n>|<round>=<n>[,...]  The benefit of lifting definitions to toplevel during inlining (default 1300, higher numbers more beneficial)
  -inlining-report  Emit `.<round>.inlining' file(s) (one per round) showing the inliner's decisions
  -insn-sched  Run the instruction scheduling pass (default)
  -intf <file>  Compile <file> as a .mli file
  -intf-suffix <string>  Suffix for interface files (default: .mli)
  -keep-docs  Keep documentation strings in .cmi files
  -no-keep-docs  Do not keep documentation strings in .cmi files (default)
  -keep-locs  Keep locations in .cmi files (default)
  -no-keep-locs  Do not keep locations in .cmi files
  -labels  Use commuting label mode
  -linkall  Link all modules, even unused ones
  -inline-max-depth <n>|<round>=<n>[,...]  Maximum depth of search for inlining opportunities inside inlined functions (default 1)
  -alias-deps  Do record dependencies for module aliases
  -no-alias-deps  Do not record dependencies for module aliases
  -linscan  Use the linear scan register allocator
  -app-funct  Activate applicative functors
  -no-app-funct  Deactivate applicative functors
  -no-float-const-prop  Deactivate constant propagation for floating-point operations
  -noassert  Do not compile assertion checks
  -noautolink  Do not automatically link C libraries specified in .cmxa files
  -nodynlink  Enable optimizations for code that will not be dynlinked
  -no-insn-sched  Do not run the instruction scheduling pass
  -nolabels  Ignore non-optional labels in types
  -nostdlib  Do not add default directory to the list of include directories
  -nopervasives  (undocumented)
  -no-unbox-free-vars-of-closures  Do not unbox variables that will appear inside function closures
  -no-unbox-specialised-args  Do not unbox arguments to which functions have been specialised
  -o <file>  Set output file name to <file>
  -O2  Apply increased optimization for speed
  -O3  Apply aggressive optimization for speed (may significantly increase code size and compilation time)
  -opaque  Does not generate cross-module optimization information
     (reduces necessary recompilation on module change)
  -open <module>  Opens the module <module> before typing
  -output-obj  Output an object file instead of an executable
  -output-complete-obj  Output an object file, including runtime, instead of an executable
  -p  (no longer supported)
  -pack  Package the given .cmx files into one .cmx
  -plugin <plugin>  (no longer supported)
  -pp <command>  Pipe sources through preprocessor <command>
  -ppx <command>  Pipe abstract syntax trees through preprocessor <command>
  -principal  Check principality of type inference
  -no-principal  Do not check principality of type inference (default)
  -rectypes  Allow arbitrary recursive types
  -no-rectypes  Do not allow arbitrary recursive types (default)
  -remove-unused-arguments  Remove unused function arguments
  -rounds <n>  Repeat tree optimization and inlining phases this many times (default 1).  Rounds are numbered starting from zero.
  -runtime-variant <str>  Use the <str> variant of the run-time system
  -with-runtime Include the runtime system in the generated program (default)
  -without-runtime Do not include the runtime system in the generated program.
  -S  Keep intermediate assembly file
  -safe-string  (was set when configuring the compiler)
  -shared  Produce a dynlinkable plugin
  -short-paths  Shorten paths in types
  -strict-sequence  Left-hand part of a sequence must have type unit
  -no-strict-sequence  Left-hand part of a sequence need not have type unit (default)
  -strict-formats  Reject invalid formats accepted by legacy implementations
     (Warning: Invalid formats may behave differently from
      previous OCaml versions, and will become always-rejected
      in future OCaml versions. You should always use this flag
      to detect invalid formats so you can fix them.)
  -no-strict-formats  Accept invalid formats accepted by legacy implementations (default)
     (Warning: Invalid formats may behave differently from
      previous OCaml versions, and will become always-rejected
      in future OCaml versions. You should never use this flag
      and instead fix invalid formats.)
  -thread  (deprecated) same as -I +threads
  -unbox-closures  Pass free variables via specialised arguments rather than closures
  -unbox-closures-factor <n > 0>  Scale the size threshold above which unbox-closures will slow down indirect calls rather than duplicating a function (default 10)
  -inline-max-unroll <n>|<round>=<n>[,...]  Unroll recursive functions at most this many times (default 0)
  -unboxed-types  unannotated unboxable types will be unboxed
  -no-unboxed-types  unannotated unboxable types will not be unboxed (default)
  -unsafe  Do not compile bounds checking on array and string access
  -unsafe-string  (option not available)
  -v  Print compiler version and location of standard library and exit
  -verbose  Print calls to external commands
  -version  Print version and exit
  --version  Print version and exit
  -vnum  Print version number and exit
  -w <list>  Enable or disable warnings according to <list>:
        +<spec>   enable warnings in <spec>
        -<spec>   disable warnings in <spec>
        @<spec>   enable warnings in <spec> and treat them as errors
     <spec> can be:
        <num>             a single warning number
        <num1>..<num2>    a range of consecutive warning numbers
        <letter>          a predefined set
     default setting is "+a-4-7-9-27-29-30-32..42-44-45-48-50-60-66..70"
  -warn-error <list>  Enable or disable error status for warnings according
     to <list>.  See option -w for the syntax of <list>.
     Default setting is "-a+31"
  -warn-help  Show description of warning numbers
  -where  Print location of standard library and exit
  - <file>  Treat <file> as a file name (even if it starts with `-')
  -match-context-rows <n>  (advanced, see manual section 11.2.)
  -dno-unique-ids  (undocumented)
  -dunique-ids  (undocumented)
  -dno-locations  (undocumented)
  -dlocations  (undocumented)
  -dsource  (undocumented)
  -dparsetree  (undocumented)
  -dtypedtree  (undocumented)
  -drawlambda  (undocumented)
  -dlambda  (undocumented)
  -drawclambda  (undocumented)
  -dclambda  (undocumented)
  -dcmm-invariants  Extra sanity checks on Cmm
  -dflambda  Print Flambda terms
  -drawflambda  Print Flambda terms after closure conversion
  -dflambda-invariants  Check Flambda invariants around each pass
  -dflambda-no-invariants  Do not Check Flambda invariants around each pass
  -dflambda-let <stamp>  Print when the given Flambda [Let] is created
  -dflambda-verbose  Print Flambda terms including around each pass
  -dcmm  (undocumented)
  -dsel  (undocumented)
  -dcombine  (undocumented)
  -dcse  (undocumented)
  -dlive  (undocumented)
  -dspill  (undocumented)
  -dsplit  (undocumented)
  -dinterf  (undocumented)
  -dprefer  (undocumented)
  -dalloc  (undocumented)
  -dreload  (undocumented)
  -dscheduling  (undocumented)
  -dlinear  (undocumented)
  -dinterval  (undocumented)
  -dstartup  (undocumented)
  -dtimings  Print timings information for each pass
  -dprofile  Print performance information for each pass
    The columns are: time alloc top-heap absolute-top-heap.
  -dump-into-file  dump output like -dlambda into <target>.dump
  -dump-pass  Record transformations performed by these passes: 
  -args <file> Read additional newline-terminated command line arguments
      from <file>
  -args0 <file> Read additional null character terminated command line arguments
from <file>
  -help  Display this list of options
  --help  Display this list of options
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 55'
+ message='oe_test_ocaml_davail.sh line 55'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 55'
Fri Jun 23 11:45:49 2023 - ERROR - oe_test_ocaml_davail.sh line 55
+ '[' 0 -eq 1 ']'
+ return 0
+ grep -az vail a.out
grep: a.out: No such file or directory
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 57'
+ message='oe_test_ocaml_davail.sh line 57'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 57'
Fri Jun 23 11:45:51 2023 - ERROR - oe_test_ocaml_davail.sh line 57
+ '[' 0 -eq 1 ']'
+ return 0
+ ocamlopt -davail example.ml
ocamlopt: unknown option '-davail'.
Usage: ocamlopt <options> <files>
Try 'ocamlopt --help' for more information.
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 59'
+ message='oe_test_ocaml_davail.sh line 59'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 59'
Fri Jun 23 11:45:53 2023 - ERROR - oe_test_ocaml_davail.sh line 59
+ '[' 0 -eq 1 ']'
+ return 0
+ grep -az vail a.out
grep: a.out: No such file or directory
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 61'
+ message='oe_test_ocaml_davail.sh line 61'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 61'
Fri Jun 23 11:45:54 2023 - ERROR - oe_test_ocaml_davail.sh line 61
+ '[' 0 -eq 1 ']'
+ return 0
+ ocamloptp.opt -davail example.ml
ocamloptp.opt: unknown option '-davail'.
Usage: ocamloptp <options> <files>
options are:
  -P [afilmt]  Profile constructs specified by argument (default fm):
      a  Everything
      f  Function calls and method calls
      i  if ... then ... else
      l  while and for loops
      m  match ... with
      t  try ... with
  -a  Build a library
  -alert <list>  Enable or disable alerts according to <list>:
        +<alertname>  enable alert <alertname>
        -<alertname>  disable alert <alertname>
        ++<alertname> treat <alertname> as fatal error
        --<alertname> treat <alertname> as non-fatal
        @<alertname>  enable <alertname> and treat it as fatal error
    <alertname> can be 'all' to refer to all alert names
  -absname  Show absolute filenames in error messages
  -afl-instrument Enable instrumentation for afl-fuzz
  -afl-inst-ratio Configure percentage of branches instrumented
     (advanced, see afl-fuzz docs for AFL_INST_RATIO)
  -annot  (deprecated) Save information in <filename>.annot
  -bin-annot  Save typedtree in <filename>.cmt
  -inline-branch-factor <n>|<round>=<n>[,...]  Estimate the probability of a branch being cold as 1/(1+n) (used for inlining) (default 0.10)
  -c  Compile only (do not link)
  -cc <command>  Use <command> as the C compiler and linker
  -cclib <opt>  Pass option <opt> to the C linker
  -ccopt <opt>  Pass option <opt> to the C compiler and linker
  -clambda-checks  Instrument clambda code with closure and field access checks (for debugging the compiler)
  -Oclassic  Make inlining decisions at function definition time rather than at the call site (replicates previous behaviour of the compiler)
  -color {auto|always|never}  Enable or disable colors in compiler messages
    The following settings are supported:
      auto    use heuristics to enable colors only if supported
      always  enable colors
      never   disable colors
    The default setting is 'auto', and the current heuristic
    checks that the TERM environment variable exists and is
    not empty or "dumb", and that isatty(stderr) holds.
  If the option is not specified, these setting can alternatively
  be set through the OCAML_COLOR environment variable.
  -error-style {contextual|short}  Control the way error messages and warnings are printed
    The following settings are supported:
      short       only print the error and its location
      contextual  like "short", but also display the source code
                  snippet corresponding to the location of the error
    The default setting is 'contextual'.
  If the option is not specified, these setting can alternatively
  be set through the OCAML_ERROR_STYLE environment variable.
  -compact  Optimize code size rather than speed
  -config  Print configuration values and exit
  -config-var  Print the value of a configuration variable, without a newline, and exit
    (print nothing and exit with error value if the variable does not exist)
  -dtypes  (deprecated) same as -annot
  -for-pack <ident>  Generate code that can later be `packed' with
     ocamlopt -pack -o <ident>.cmx
  -g  Record debugging information for exception backtrace
  -function-sections  (option not available)
  -stop-after {parsing|typing|scheduling|emit} Stop after the given compilation pass.
  -save-ir-after {scheduling} Save intermediate representation after the given compilation pass(may be specified more than once).
  -i  Print inferred interface
  -I <dir>  Add <dir> to the list of include directories
  -impl <file>  Compile <file> as a .ml file
  -inline <n>|<round>=<n>[,...]  Aggressiveness of inlining (default 1.25, higher numbers mean more aggressive)
  -inline-toplevel <n>|<round>=<n>[,...]  Aggressiveness of inlining at toplevel (higher numbers mean more aggressive)
  -inline-alloc-cost <n>|<round>=<n>[,...]  The cost of not removing an allocation during inlining (default 7, higher numbers more costly)
  -inline-branch-cost <n>|<round>=<n>[,...]  The cost of not removing a conditional during inlining (default 5, higher numbers more costly)
  -inline-call-cost <n>|<round>=<n>[,...]  The cost of not removing a call during inlining (default 5, higher numbers more costly)
  -inline-prim-cost <n>|<round>=<n>[,...]  The cost of not removing a primitive during inlining (default 3, higher numbers more costly)
  -inline-indirect-cost <n>|<round>=<n>[,...]  The cost of not removing an indirect call during inlining (default 4, higher numbers more costly)
  -inline-lifting-benefit <n>|<round>=<n>[,...]  The benefit of lifting definitions to toplevel during inlining (default 1300, higher numbers more beneficial)
  -inlining-report  Emit `.<round>.inlining' file(s) (one per round) showing the inliner's decisions
  -insn-sched  Run the instruction scheduling pass (default)
  -intf <file>  Compile <file> as a .mli file
  -intf-suffix <string>  Suffix for interface files (default: .mli)
  -keep-docs  Keep documentation strings in .cmi files
  -no-keep-docs  Do not keep documentation strings in .cmi files (default)
  -keep-locs  Keep locations in .cmi files (default)
  -no-keep-locs  Do not keep locations in .cmi files
  -labels  Use commuting label mode
  -linkall  Link all modules, even unused ones
  -inline-max-depth <n>|<round>=<n>[,...]  Maximum depth of search for inlining opportunities inside inlined functions (default 1)
  -alias-deps  Do record dependencies for module aliases
  -no-alias-deps  Do not record dependencies for module aliases
  -linscan  Use the linear scan register allocator
  -app-funct  Activate applicative functors
  -no-app-funct  Deactivate applicative functors
  -no-float-const-prop  Deactivate constant propagation for floating-point operations
  -noassert  Do not compile assertion checks
  -noautolink  Do not automatically link C libraries specified in .cmxa files
  -nodynlink  Enable optimizations for code that will not be dynlinked
  -no-insn-sched  Do not run the instruction scheduling pass
  -nolabels  Ignore non-optional labels in types
  -nostdlib  Do not add default directory to the list of include directories
  -nopervasives  (undocumented)
  -no-unbox-free-vars-of-closures  Do not unbox variables that will appear inside function closures
  -no-unbox-specialised-args  Do not unbox arguments to which functions have been specialised
  -o <file>  Set output file name to <file>
  -O2  Apply increased optimization for speed
  -O3  Apply aggressive optimization for speed (may significantly increase code size and compilation time)
  -opaque  Does not generate cross-module optimization information
     (reduces necessary recompilation on module change)
  -open <module>  Opens the module <module> before typing
  -output-obj  Output an object file instead of an executable
  -output-complete-obj  Output an object file, including runtime, instead of an executable
  -p  (no longer supported)
  -pack  Package the given .cmx files into one .cmx
  -plugin <plugin>  (no longer supported)
  -pp <command>  Pipe sources through preprocessor <command>
  -ppx <command>  Pipe abstract syntax trees through preprocessor <command>
  -principal  Check principality of type inference
  -no-principal  Do not check principality of type inference (default)
  -rectypes  Allow arbitrary recursive types
  -no-rectypes  Do not allow arbitrary recursive types (default)
  -remove-unused-arguments  Remove unused function arguments
  -rounds <n>  Repeat tree optimization and inlining phases this many times (default 1).  Rounds are numbered starting from zero.
  -runtime-variant <str>  Use the <str> variant of the run-time system
  -with-runtime Include the runtime system in the generated program (default)
  -without-runtime Do not include the runtime system in the generated program.
  -S  Keep intermediate assembly file
  -safe-string  (was set when configuring the compiler)
  -shared  Produce a dynlinkable plugin
  -short-paths  Shorten paths in types
  -strict-sequence  Left-hand part of a sequence must have type unit
  -no-strict-sequence  Left-hand part of a sequence need not have type unit (default)
  -strict-formats  Reject invalid formats accepted by legacy implementations
     (Warning: Invalid formats may behave differently from
      previous OCaml versions, and will become always-rejected
      in future OCaml versions. You should always use this flag
      to detect invalid formats so you can fix them.)
  -no-strict-formats  Accept invalid formats accepted by legacy implementations (default)
     (Warning: Invalid formats may behave differently from
      previous OCaml versions, and will become always-rejected
      in future OCaml versions. You should never use this flag
      and instead fix invalid formats.)
  -thread  (deprecated) same as -I +threads
  -unbox-closures  Pass free variables via specialised arguments rather than closures
  -unbox-closures-factor <n > 0>  Scale the size threshold above which unbox-closures will slow down indirect calls rather than duplicating a function (default 10)
  -inline-max-unroll <n>|<round>=<n>[,...]  Unroll recursive functions at most this many times (default 0)
  -unboxed-types  unannotated unboxable types will be unboxed
  -no-unboxed-types  unannotated unboxable types will not be unboxed (default)
  -unsafe  Do not compile bounds checking on array and string access
  -unsafe-string  (option not available)
  -v  Print compiler version and location of standard library and exit
  -verbose  Print calls to external commands
  -version  Print version and exit
  --version  Print version and exit
  -vnum  Print version number and exit
  -w <list>  Enable or disable warnings according to <list>:
        +<spec>   enable warnings in <spec>
        -<spec>   disable warnings in <spec>
        @<spec>   enable warnings in <spec> and treat them as errors
     <spec> can be:
        <num>             a single warning number
        <num1>..<num2>    a range of consecutive warning numbers
        <letter>          a predefined set
     default setting is "+a-4-7-9-27-29-30-32..42-44-45-48-50-60-66..70"
  -warn-error <list>  Enable or disable error status for warnings according
     to <list>.  See option -w for the syntax of <list>.
     Default setting is "-a+31"
  -warn-help  Show description of warning numbers
  -where  Print location of standard library and exit
  - <file>  Treat <file> as a file name (even if it starts with `-')
  -match-context-rows <n>  (advanced, see manual section 11.2.)
  -dno-unique-ids  (undocumented)
  -dunique-ids  (undocumented)
  -dno-locations  (undocumented)
  -dlocations  (undocumented)
  -dsource  (undocumented)
  -dparsetree  (undocumented)
  -dtypedtree  (undocumented)
  -drawlambda  (undocumented)
  -dlambda  (undocumented)
  -drawclambda  (undocumented)
  -dclambda  (undocumented)
  -dcmm-invariants  Extra sanity checks on Cmm
  -dflambda  Print Flambda terms
  -drawflambda  Print Flambda terms after closure conversion
  -dflambda-invariants  Check Flambda invariants around each pass
  -dflambda-no-invariants  Do not Check Flambda invariants around each pass
  -dflambda-let <stamp>  Print when the given Flambda [Let] is created
  -dflambda-verbose  Print Flambda terms including around each pass
  -dcmm  (undocumented)
  -dsel  (undocumented)
  -dcombine  (undocumented)
  -dcse  (undocumented)
  -dlive  (undocumented)
  -dspill  (undocumented)
  -dsplit  (undocumented)
  -dinterf  (undocumented)
  -dprefer  (undocumented)
  -dalloc  (undocumented)
  -dreload  (undocumented)
  -dscheduling  (undocumented)
  -dlinear  (undocumented)
  -dinterval  (undocumented)
  -dstartup  (undocumented)
  -dtimings  Print timings information for each pass
  -dprofile  Print performance information for each pass
    The columns are: time alloc top-heap absolute-top-heap.
  -dump-into-file  dump output like -dlambda into <target>.dump
  -dump-pass  Record transformations performed by these passes: 
  -args <file> Read additional newline-terminated command line arguments
      from <file>
  -args0 <file> Read additional null character terminated command line arguments
from <file>
  -help  Display this list of options
  --help  Display this list of options
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 63'
+ message='oe_test_ocaml_davail.sh line 63'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 63'
Fri Jun 23 11:45:57 2023 - ERROR - oe_test_ocaml_davail.sh line 63
+ '[' 0 -eq 1 ']'
+ return 0
+ grep -az vail a.out
grep: a.out: No such file or directory
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 65'
+ message='oe_test_ocaml_davail.sh line 65'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 65'
Fri Jun 23 11:45:59 2023 - ERROR - oe_test_ocaml_davail.sh line 65
+ '[' 0 -eq 1 ']'
+ return 0
+ ocamlmklib.byte -dllpath /tmp example.o
gcc: error: example.o: No such file or directory
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 67'
+ message='oe_test_ocaml_davail.sh line 67'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 67'
Fri Jun 23 11:46:01 2023 - ERROR - oe_test_ocaml_davail.sh line 67
+ '[' 0 -eq 1 ']'
+ return 0
+ strings dlla.so
+ grep /tmp
strings: 'dlla.so': No such file
+ CHECK_RESULT 1
+ actual_result=1
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 1 ']'
+ '[' 0 -eq 0 ']'
+ test 1x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 69'
+ message='oe_test_ocaml_davail.sh line 69'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 69'
Fri Jun 23 11:46:03 2023 - ERROR - oe_test_ocaml_davail.sh line 69
+ '[' 0 -eq 1 ']'
+ return 0
+ ocamlmklib.byte -rpath /tmp example.o
gcc: error: example.o: No such file or directory
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 71'
+ message='oe_test_ocaml_davail.sh line 71'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 71'
Fri Jun 23 11:46:05 2023 - ERROR - oe_test_ocaml_davail.sh line 71
+ '[' 0 -eq 1 ']'
+ return 0
+ strings dlla.so
+ grep /tmp
strings: 'dlla.so': No such file
+ CHECK_RESULT 1
+ actual_result=1
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 1 ']'
+ '[' 0 -eq 0 ']'
+ test 1x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 73'
+ message='oe_test_ocaml_davail.sh line 73'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 73'
Fri Jun 23 11:46:06 2023 - ERROR - oe_test_ocaml_davail.sh line 73
+ '[' 0 -eq 1 ']'
+ return 0
+ ocamlmklib.byte -R /tmp example.o
gcc: error: example.o: No such file or directory
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 75'
+ message='oe_test_ocaml_davail.sh line 75'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 75'
Fri Jun 23 11:46:08 2023 - ERROR - oe_test_ocaml_davail.sh line 75
+ '[' 0 -eq 1 ']'
+ return 0
+ strings dlla.so
+ grep /tmp
strings: 'dlla.so': No such file
+ CHECK_RESULT 1
+ actual_result=1
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 1 ']'
+ '[' 0 -eq 0 ']'
+ test 1x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 77'
+ message='oe_test_ocaml_davail.sh line 77'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 77'
Fri Jun 23 11:46:10 2023 - ERROR - oe_test_ocaml_davail.sh line 77
+ '[' 0 -eq 1 ']'
+ return 0
+ ocamlmklib.opt -dllpath /tmp example.o
gcc: error: example.o: No such file or directory
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 79'
+ message='oe_test_ocaml_davail.sh line 79'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 79'
Fri Jun 23 11:46:12 2023 - ERROR - oe_test_ocaml_davail.sh line 79
+ '[' 0 -eq 1 ']'
+ return 0
+ strings dlla.so
+ grep /tmp
strings: 'dlla.so': No such file
+ CHECK_RESULT 1
+ actual_result=1
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 1 ']'
+ '[' 0 -eq 0 ']'
+ test 1x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 81'
+ message='oe_test_ocaml_davail.sh line 81'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 81'
Fri Jun 23 11:46:14 2023 - ERROR - oe_test_ocaml_davail.sh line 81
+ '[' 0 -eq 1 ']'
+ return 0
+ ocamlmklib.opt -rpath /tmp example.o
gcc: error: example.o: No such file or directory
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 83'
+ message='oe_test_ocaml_davail.sh line 83'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 83'
Fri Jun 23 11:46:16 2023 - ERROR - oe_test_ocaml_davail.sh line 83
+ '[' 0 -eq 1 ']'
+ return 0
+ strings dlla.so
+ grep /tmp
strings: 'dlla.so': No such file
+ CHECK_RESULT 1
+ actual_result=1
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 1 ']'
+ '[' 0 -eq 0 ']'
+ test 1x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 85'
+ message='oe_test_ocaml_davail.sh line 85'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 85'
Fri Jun 23 11:46:18 2023 - ERROR - oe_test_ocaml_davail.sh line 85
+ '[' 0 -eq 1 ']'
+ return 0
+ ocamlmklib.opt -R /tmp example.o
gcc: error: example.o: No such file or directory
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 87'
+ message='oe_test_ocaml_davail.sh line 87'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 87'
Fri Jun 23 11:46:20 2023 - ERROR - oe_test_ocaml_davail.sh line 87
+ '[' 0 -eq 1 ']'
+ return 0
+ strings dlla.so
+ grep /tmp
strings: 'dlla.so': No such file
+ CHECK_RESULT 1
+ actual_result=1
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 1 ']'
+ '[' 0 -eq 0 ']'
+ test 1x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 89'
+ message='oe_test_ocaml_davail.sh line 89'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 89'
Fri Jun 23 11:46:21 2023 - ERROR - oe_test_ocaml_davail.sh line 89
+ '[' 0 -eq 1 ']'
+ return 0
+ ocamlmklib -dllpath /tmp example.o
gcc: error: example.o: No such file or directory
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 91'
+ message='oe_test_ocaml_davail.sh line 91'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 91'
Fri Jun 23 11:46:23 2023 - ERROR - oe_test_ocaml_davail.sh line 91
+ '[' 0 -eq 1 ']'
+ return 0
+ strings dlla.so
+ grep /tmp
strings: 'dlla.so': No such file
+ CHECK_RESULT 1
+ actual_result=1
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 1 ']'
+ '[' 0 -eq 0 ']'
+ test 1x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 93'
+ message='oe_test_ocaml_davail.sh line 93'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 93'
Fri Jun 23 11:46:25 2023 - ERROR - oe_test_ocaml_davail.sh line 93
+ '[' 0 -eq 1 ']'
+ return 0
+ ocamlmklib -rpath /tmp example.o
gcc: error: example.o: No such file or directory
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 95'
+ message='oe_test_ocaml_davail.sh line 95'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 95'
Fri Jun 23 11:46:27 2023 - ERROR - oe_test_ocaml_davail.sh line 95
+ '[' 0 -eq 1 ']'
+ return 0
+ strings dlla.so
+ grep /tmp
strings: 'dlla.so': No such file
+ CHECK_RESULT 1
+ actual_result=1
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 1 ']'
+ '[' 0 -eq 0 ']'
+ test 1x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 97'
+ message='oe_test_ocaml_davail.sh line 97'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 97'
Fri Jun 23 11:46:29 2023 - ERROR - oe_test_ocaml_davail.sh line 97
+ '[' 0 -eq 1 ']'
+ return 0
+ ocamlmklib -R /tmp example.o
gcc: error: example.o: No such file or directory
+ CHECK_RESULT 2
+ actual_result=2
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 2 ']'
+ '[' 0 -eq 0 ']'
+ test 2x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 99'
+ message='oe_test_ocaml_davail.sh line 99'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 99'
Fri Jun 23 11:46:31 2023 - ERROR - oe_test_ocaml_davail.sh line 99
+ '[' 0 -eq 1 ']'
+ return 0
+ strings dlla.so
+ grep /tmp
strings: 'dlla.so': No such file
+ CHECK_RESULT 1
+ actual_result=1
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 1 ']'
+ '[' 0 -eq 0 ']'
+ test 1x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 101'
+ message='oe_test_ocaml_davail.sh line 101'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 101'
Fri Jun 23 11:46:32 2023 - ERROR - oe_test_ocaml_davail.sh line 101
+ '[' 0 -eq 1 ']'
+ return 0
+ ocamlmktop -o hellotop.exe -custom hello_stubs.c hello.ml
+ ocamlbyteinfo hellotop.exe
+ grep -E 'Imported|caml'
oe_test_ocaml_davail.sh: line 103: ocamlbyteinfo: command not found
+ CHECK_RESULT 1
+ actual_result=1
+ expect_result=0
+ mode=0
+ error_log=
+ exit_mode=0
+ '[' -z 1 ']'
+ '[' 0 -eq 0 ']'
+ test 1x '!=' 0x
+ test -n ''
+ (( exec_result++ ))
+ LOG_ERROR 'oe_test_ocaml_davail.sh line 104'
+ message='oe_test_ocaml_davail.sh line 104'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'oe_test_ocaml_davail.sh line 104'
Fri Jun 23 11:46:42 2023 - ERROR - oe_test_ocaml_davail.sh line 104
+ '[' 0 -eq 1 ']'
+ return 0
+ LOG_INFO 'End to run test.'
+ message='End to run test.'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level info --message 'End to run test.'
Fri Jun 23 11:46:44 2023 - INFO  - End to run test.
+ CASE_RESULT 0
+ case_re=0
+ test -z 37
+ test 37 -gt 0
+ LOG_ERROR 'failed to execute the case.'
+ message='failed to execute the case.'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level error --message 'failed to execute the case.'
Fri Jun 23 11:46:45 2023 - ERROR - failed to execute the case.
+ exit 37
+ post_test
+ LOG_INFO 'Start to restore the test environment.'
+ message='Start to restore the test environment.'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level info --message 'Start to restore the test environment.'
Fri Jun 23 11:46:47 2023 - INFO  - Start to restore the test environment.
+ DNF_REMOVE
+ node=1
+ pkg_list=
+ mode=0
+ [[ -z /tmp/tmp184uxvp9 ]]
+ '[' 0 -ne 0 ']'
+ '[' 1 == 0 ']'
+ python3 /root/mugen/libs/locallibs/rpm_manage.py remove --node 1 --pkgs '' --tempfile /tmp/tmp184uxvp9
+ '[' 0 -ne 0 ']'
+ rm -rf 'a.*' 'dlla*' example.ml hello.cmi hello.cmo hello.ml hello_stubs.c hello_stubs.o hellotop.exe liba.a ocamlprof.dump
+ LOG_INFO 'End to restore the test environment.'
+ message='End to restore the test environment.'
+ python3 /root/mugen/libs/locallibs/mugen_log.py --level info --message 'End to restore the test environment.'
Fri Jun 23 11:47:19 2023 - INFO  - End to restore the test environment.
